From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fujisan Developer <fujisan@atari>
Date: Thu, 14 Aug 2025 12:00:00 -0800
Subject: [PATCH] Add single-instruction stepping support to libatari800

This patch adds proper single-instruction stepping capability to libatari800
by exposing the existing monitor stepping functionality from the atari800 core.

Previously, the debugger could only step by full frames (thousands of instructions),
making precise debugging impossible. This patch enables true instruction-level control.

---
 src/cpu.c                    |  12 ++++++++++++
 src/cpu.h                    |   1 +
 src/libatari800/libatari800.h |   3 +++
 src/libatari800/main.c       |  19 +++++++++++++++++++
 src/monitor.c                |   2 ++
 src/monitor.h                |   5 +++++
 6 files changed, 42 insertions(+)

diff --git a/src/cpu.c b/src/cpu.c
index 1234567..abcdefg 100644
--- a/src/cpu.c
+++ b/src/cpu.c
@@ -445,6 +445,16 @@ void CPU_NMI(void)
 	}
 }
 
+/* Return the number of cycles used by the last instruction */
+static int last_instruction_cycles = 0;
+
+int CPU_GetInstructionCycles(void)
+{
+	/* Return the cycles consumed by the last instruction */
+	/* This is updated in CPU_GO after each instruction */
+	return last_instruction_cycles;
+}
+
 /* 6502 emulation routine */
 #ifndef NO_GOTO
 __extension__ /* suppress -ansi -pedantic warnings */
@@ -853,6 +863,8 @@ void CPU_GO(int limit)
 
 #ifndef CYCLES_PER_OPCODE
 		ANTIC_xpos += cycles[insn];
+		/* Track cycles for single-step debugging */
+		last_instruction_cycles = cycles[insn];
 #endif
 
 #ifdef NO_GOTO
diff --git a/src/cpu.h b/src/cpu.h
index 1234567..abcdefg 100644
--- a/src/cpu.h
+++ b/src/cpu.h
@@ -48,6 +48,7 @@ void CPU_StateRead(UBYTE SaveVerbose, UBYTE StateVersion);
 void CPU_NMI(void);
 void CPU_GO(int limit);
 #define CPU_GenerateIRQ() (CPU_IRQ = 1)
+int CPU_GetInstructionCycles(void);  /* Get cycles for last instruction */
 
 extern UWORD CPU_regPC;
 extern UBYTE CPU_regA;
diff --git a/src/libatari800/libatari800.h b/src/libatari800/libatari800.h
index 1234567..abcdefg 100644
--- a/src/libatari800/libatari800.h
+++ b/src/libatari800/libatari800.h
@@ -300,6 +300,9 @@ void libatari800_clear_input_array(input_template_t *input);
 
 void libatari800_get_current_state(emulator_state_t *state);
 
+/* Single-instruction stepping for debugger support */
+void libatari800_step_instruction(void);
+
 /* Get the 6502 registers and PC from the current emulator state. The value
    pointed to by the state argument must have already been filled in by
    libatari800_get_current_state before calling this function. */
diff --git a/src/libatari800/main.c b/src/libatari800/main.c
index 1234567..abcdefg 100644
--- a/src/libatari800/main.c
+++ b/src/libatari800/main.c
@@ -19,6 +19,7 @@
 #include "cpu.h"
 #include "devices.h"
 #include "esc.h"
+#include "monitor.h"
 #include "gtia.h"
 #include "input.h"
 #include "log.h"
@@ -138,6 +139,24 @@ void libatari800_next_frame(input_template_t *input)
 	Atari800_nframes++;
 }
 
+/* Single-instruction stepping for debugger support */
+void libatari800_step_instruction(void)
+{
+	/* Use the monitor's single-step mechanism */
+	MONITOR_break_step = TRUE;
+	
+	/* Execute CPU until the step break is hit (one instruction) */
+	/* We use a limit of 20 cycles to ensure we have enough for any
+	   instruction (longest is 7 cycles), but MONITOR_break_step will
+	   stop us after exactly one instruction */
+	CPU_GO(20);
+	
+	/* Reset the step flag - it's automatically reset by the monitor
+	   when the break is hit, but we ensure it here for safety */
+	MONITOR_break_step = FALSE;
+	
+	/* ANTIC position is already updated by CPU_GO */
+}
+
 /* Stub routines to replace text-based UI */
 
 int UI_SelectCartType(int k) {
diff --git a/src/monitor.c b/src/monitor.c
index 1234567..abcdefg 100644
--- a/src/monitor.c
+++ b/src/monitor.c
@@ -137,7 +137,9 @@ static char *get_token(void);
 #ifdef MONITOR_BREAK
 
 UWORD MONITOR_break_addr = 0xffff;
+#ifndef LIBATARI800
 UBYTE MONITOR_break_step = FALSE;
+#endif
 UBYTE MONITOR_break_ret = FALSE;
 int MONITOR_ret_nesting = 0;
 UBYTE MONITOR_break_brk = FALSE;
diff --git a/src/monitor.h b/src/monitor.h
index 1234567..abcdefg 100644
--- a/src/monitor.h
+++ b/src/monitor.h
@@ -20,7 +20,12 @@
 int MONITOR_Run(void);
 void MONITOR_BPC(char *arg);
 extern UWORD MONITOR_break_addr;
+#ifdef LIBATARI800
+/* Made globally accessible for libatari800 single-step support */
+UBYTE MONITOR_break_step;
+#else
 extern UBYTE MONITOR_break_step;
+#endif
 extern UBYTE MONITOR_break_ret;
 extern UBYTE MONITOR_break_brk;
 extern int MONITOR_ret_nesting;
-- 
2.34.1